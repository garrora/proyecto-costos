
<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.0.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.3/css/dataTables.bootstrap5.min.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.10.0/mdb.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />


    <!-- Font Google -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;700&display=swap" rel="stylesheet">


    <link href="~/css/estilosdashboard.css" rel="stylesheet" />
    <link href="~/css/estiloscliente.css" rel="stylesheet" />
    <title>IT Rossmon - Clientes</title>
</head>

<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        <div class="bg-dark" id="sidebar-wrapper">
            <div class="sidebar-heading text-center">
                <img src="http://www.rossmon.co.cr/wp-content/uploads/2021/06/cropped-imageonline-co-transparentimage-2.png"
                     alt="" width="100">
            </div>
            <div class="list-group list-group-flush text-muted my-3">
                <a href="~/Clientes/" class="list-group-item text-muted list-group-item-action bg-transparent">
                    <i style="color: #B92125" class="fas fa-users me-2"></i>Clientes
                </a>
                <a href="~/Proyectos/" class="list-group-item text-muted list-group-item-action bg-transparent">
                    <i style="color: #B92125" class="fas fa-project-diagram me-2"></i>Proyectos
                </a>
                <a href="~/Reportes/" class="list-group-item text-muted list-group-item-action bg-transparent">
                    <i style="color: #B92125" class="fas fa-folder me-2"></i>Reportes
                </a>
                <a href="~/Configuracion/" class="list-group-item text-muted list-group-item-action bg-transparent">
                    <i style="color: #B92125" class="fas fa-cog me-2"></i>Configuración
                </a>
            </div>
        </div>
        <!-- /#sidebar-wrapper -->
        <!-- Page Content -->
        <div id="page-content-wrapper">
            <nav class="navbar navbar-expand-xxl navbar-dark bg-dark px-4">
                <div class="container-fluid">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-align-left text-muted fs-4" id="menu-toggle"></i>
                    </div>


                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                            data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>



                    <!-- Toggle button -->
                    <button class="navbar-toggler" type="button" data-mdb-toggle="collapse"
                            data-mdb-target="#navbarRightAlignExample" aria-controls="navbarRightAlignExample"
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="fas fa-bars text-muted fs-4"></span>
                    </button>


                    <!-- Collapsible wrapper -->
                    <div class="collapse navbar-collapse" id="navbarRightAlignExample">
                        <!-- Left links -->
                        <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                            <li class="nav-item me-3 me-lg-0 dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                                   data-mdb-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-user me-2"></i> María Fernanda Sanchéz Valerín
                                </a>
                                <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                                    <li>
                                        <a class="dropdown-item" href="#">Directora administrativa</a>
                                    </li>
                                    <li>
                                        <a class="dropdown-item" href="~/Configuracion/">Configuración</a>
                                    </li>

                                    <li>
                                        <a class="dropdown-item" href="~/Clientes/cerrarSesion">Cerrar sesión</a>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                        <!-- Left links -->
                    </div>
                    <!-- Collapsible wrapper -->
                </div>
            </nav>

            <div class="container-fluid px-4">

                <div class="row my-5">
                    <div>
                        <a id="btnModalAgregaCliente" class="btn btn-dark mb-5" href="#!" role="button" data-mdb-toggle="modal" data-mdb-target="#modalAgregaCliente"><i class="fas fa-user-plus me-2"></i>Agregar cliente</a>
                    </div>


                    <div class="col">
                        <div class="table-responsive">
                            <table id="tabla-cliente" class="table bg-white rounded table-hover">
                                <thead>
                                    <tr>
                                        <th>Número de identificación</th>
                                        <th>Tipo de identificación</th>
                                        <th>Nombre</th>
                                        <th>Número telefónico</th>
                                        <th>Correo electrónico</th>
                                        <th>Correo electrónico copia</th>
                                        <th>Provincia</th>
                                        <th>Cantón</th>
                                        <th>Distrito</th>
                                        <th>Dirección</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody id="tabla-clientes">
                                </tbody>

                            </table>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <!-- /#page-content-wrapper -->
    <!--Modal de agregar clientes  -->
    <div class="modal fade" id="modalAgregaCliente" tabindex="-1" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">


                <div class="modal-body">
                    <h5 class="modal-title text-center py-3" id="exampleModalLabel">Agregar cliente</h5>
                    <form id="formularioAgregaCliente">

                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" name="txtNumeroIdentificacion" id="txtNumeroIdentificacion" placeholder="Número de identificación">
                                    <label for="floatingInput">Número de identificación</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectTipoIdentificacion" name="selectTipoIdentificacion">
                                        <option selected disabled value="">Seleccione</option>
                                        <option value="Identificación jurídica">Identificación jurídica</option>
                                        <option value="Identificación física">Identificación física</option>
                                        <option value="Identificación extranjero">Identificación extranjero</option>
                                    </select>
                                    <label for="selectTipoIdentificacion">Tipo de identificación</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" name="txtNombre" id="txtNombre" placeholder="Nombre">
                                    <label for="floatingInput">Nombre</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2">

                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="tel" class="form-control" maxlength="3" name="txtCodigoTelefonico" id="txtCodigoTelefonico" placeholder="Código telefónico">
                                    <label for="floatingInput">Código telefónico</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>


                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="tel" class="form-control" name="txtNumeroTelefonico" id="txtNumeroTelefonico" placeholder="Número telefónico">
                                    <label for="floatingInput">Número telefónico</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>



                        </div>

                        <div class="row g-2">

                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="email" class="form-control" name="txtCorreoElectronico" id="txtCorreoElectronico" placeholder="Correo electrónico">
                                    <label for="floatingInput">Correo electrónico</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>

                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="tel" class="form-control" name="txtCorreoElectronicoDos" id="txtCorreoElectronicoDos" placeholder="Número telefónico">
                                    <label for="floatingInput">Correo electrónico copia</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>



                        </div>

                        <div class="row g-3">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectProvincias" name="selectProvincias">
                                        <option selected value="">Seleccione</option>
                                    </select>
                                    <label for="selectProvincias">Provincia</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectCantones" name="selectCantones">
                                        <option selected value="">Seleccione</option>
                                    </select>
                                    <label for="selectCantones">Cantón</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectDistritos" name="selectDistritos">
                                        <option selected value="">Seleccione</option>
                                    </select>
                                    <label for="selectDistritos">Distrito</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" name="txtDireccion" id="txtDireccion" placeholder="Dirección">
                                    <label for="floatingInput">Dirección</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>


                        <div class="modal-footer">
                            <button type="submit" class="btn btn-danger"><i class="fas fa-user-plus me-2"></i>Agregar cliente</button>
                        </div>

                    </form>

                </div>


            </div>
        </div>
    </div>


    <!--Modal de editar clientes  -->
    <div class="modal fade" id="modalEditaCliente" tabindex="-1" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">

                <div class="modal-body">
                    <h5 class="modal-title text-center py-3" id="exampleModalLabel">Editar cliente</h5>

                    <form id="formularioEditaCliente">

                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input readonly type="text" class="form-control" name="txtEditaNumeroIdentificacion" id="txtEditaNumeroIdentificacion" placeholder="Número de identificación">
                                    <label for="floatingInput">Número de identificación</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input readonly type="text" class="form-control" name="txtTipoIdentificacion" id="txtTipoIdentificacion" placeholder="Tipo de identificación">
                                    <label for="floatingInput">Tipo de identificación</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" name="txtEditaNombre" id="txtEditaNombre" placeholder="Nombre">
                                    <label for="floatingInput">Nombre</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2">


                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="tel" class="form-control" maxlength="3" name="txtEditaCodigoTelefonico" id="txtEditaCodigoTelefonico" placeholder="Código telefónico">
                                    <label for="floatingInput">Código telefónico</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>


                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="tel" class="form-control" name="txtEditaNumeroTelefonico" id="txtEditaNumeroTelefonico" placeholder="Número telefónico">
                                    <label for="floatingInput">Número telefónico</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>

                        </div>


                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="email" class="form-control" name="txtEditaCorreoElectronico" id="txtEditaCorreoElectronico" placeholder="Correo electrónico">
                                    <label for="floatingInput">Correo electrónico</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>

                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="tel" class="form-control" name="txtEditaCorreoElectronicoDos" id="txtEditaCorreoElectronicoDos" placeholder="Número telefónico">
                                    <label for="floatingInput">Correo electrónico copia</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>


                        <div class="row g-3">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectEditaProvincias" name="selectEditaProvincias">
                                        <option selected value="">Seleccione</option>
                                    </select>
                                    <label for="selectProvincias">Provincia</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectEditaCantones" name="selectEditaCantones">
                                        <option selected value="">Seleccione</option>
                                    </select>
                                    <label for="selectCantones">Cantón</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <select class="form-select" id="selectEditaDistritos" name="selectEditaDistritos">
                                        <option selected value="">Seleccione</option>
                                    </select>
                                    <label for="selectDistritos">Distrito</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>

                        <div class="row g-2">
                            <div class="col-md">
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control" name="txtEditaDireccion" id="txtEditaDireccion" placeholder="Dirección">
                                    <label for="floatingInput">Dirección</label>
                                    <small class="text-danger py-2"></small>
                                </div>
                            </div>
                        </div>


                        <div class="modal-footer">
                            <button type="submit" class="btn btn-danger"><i class="fas fa-user-edit me-2"></i>Editar cliente</button>
                        </div>

                    </form>
                </div>




            </div>
        </div>
    </div>

    <!--Modal de eliminar clientes  -->

    <div class="modal fade" id="modalEliminaCliente" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">




                <div class="modal-body">
                    <h5 class="modal-title text-center" id="exampleModalLabel">Eliminar cliente</h5>
                    <hr />

                    <p>
                        ¿Desea eliminar el cliente seleccionado?
                    </p>
                </div>

                <form id="formularioEliminaCliente">

                    <input type="hidden" name="txtEliminaNumeroIdentificacion" id="txtEliminaNumeroIdentificacion" value="" />
                    <div class="modal-footer">
                        <button type="button" class="btn btn-dark"
                                data-mdb-dismiss="modal">
                            Cancelar
                        </button>
                        <button type="submit" class="btn btn-danger">Aceptar</button>

                    </div>

                </form>





            </div>
        </div>
    </div>




    <!--Template tabla clientes  -->
    <template id="template-tabla-clientes">
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td>
                <button type="button" class="btn-edita btn-sm btn-outline-warning btn-floating"
                        data-mdb-ripple-color="dark">
                    <i class="fas fa-pencil-alt"></i>
                </button>
                <button type="button" class="btn-elimina btn-sm btn-outline-danger btn-floating"
                        data-mdb-ripple-color="dark">
                    <i class="fas fa-trash-alt"></i>
                </button>
            </td>
        </tr>
    </template>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- MDB -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.10.0/mdb.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.3/js/dataTables.bootstrap5.min.js"></script>

    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>

        // Variables del dashboard
        let wrapper = document.getElementById("wrapper");
        let menuToggle = document.getElementById("menu-toggle");

        const tablaClientes = document.getElementById('tabla-clientes');

        // Acumula los valores que provienen de la base de datos tanto canton como distrito
        let valorCantonEdita = '';
        let valorDistritoEdita = '';

        // Variables de validacion formulario de editar cliente
        const formularioEditaCliente = document.getElementById('formularioEditaCliente');
        const txtEditaNumeroIdentificacion = document.getElementById('txtEditaNumeroIdentificacion');
        const txtEditaDireccion = document.getElementById('txtEditaDireccion');
        const selectEditaDistritos = document.getElementById('selectEditaDistritos');
        const selectEditaCantones = document.getElementById('selectEditaCantones');
        const selectEditaProvincias = document.getElementById('selectEditaProvincias');
        const txtEditaNumeroTelefonico = document.getElementById('txtEditaNumeroTelefonico');
        const txtEditaCorreoElectronicoDos = document.getElementById('txtEditaCorreoElectronicoDos');
        const txtEditaCorreoElectronico = document.getElementById('txtEditaCorreoElectronico');
        const txtEditaNombre = document.getElementById('txtEditaNombre');
        const txtTipoIdentificacion = document.getElementById('txtTipoIdentificacion');
        const txtEditaCodigoTelefonico = document.getElementById('txtEditaCodigoTelefonico');


        // Variables de validacion formulario de agregar cliente
        const formularioAgregaCliente = document.getElementById('formularioAgregaCliente');
        const txtNumeroIdentificacion = document.getElementById('txtNumeroIdentificacion');
        const selectTipoIdentificacion = document.getElementById('selectTipoIdentificacion');
        const txtNombre = document.getElementById('txtNombre');
        const txtNumeroTelefonico = document.getElementById('txtNumeroTelefonico');
        const txtCorreoElectronico = document.getElementById('txtCorreoElectronico');
        const txtDireccion = document.getElementById('txtDireccion');
        const txtCodigoTelefonico = document.getElementById('txtCodigoTelefonico');


        // Variables de eliminar cliente
        const formularioEliminaCliente = document.getElementById('formularioEliminaCliente');

        // Variables de lugares (Provincia, Canton, Distrito)
        const selectProvincias = document.getElementById('selectProvincias');
        const selectCantones = document.getElementById('selectCantones');
        const selectDistritos = document.getElementById('selectDistritos');

        // Boton de apertura de modal agrega cliente
        const btnModalAgregaCliente = document.getElementById('btnModalAgregaCliente');

        // Template
        const templateTablaClientes = document.getElementById('template-tabla-clientes').content;

        // Fragmento para evitar el reflow
        const fragmento = document.createDocumentFragment();

        // Movimiento de menu
        menuToggle.addEventListener('click', () => {
            wrapper.classList.toggle("toggled");
        })

        // Esto es lo que carga el DOM apenas renderiza la pagina
        document.addEventListener('DOMContentLoaded', () => {

            validarDiferentesTiposValoresInput();
            fetchDataClientes();

        })

        btnModalAgregaCliente.addEventListener('click', () => {

            fetchDataProvincias(selectProvincias);

        })

        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de provincias
        const fetchDataProvincias = async (select) => {

            try {

                const url = "@Url.Content("~/Clientes/listarProvincias")";
                const response = await fetch(url);
                const data = await response.json();
                listarSelectProvincias(data, select);


            } catch (error) { console.log(error); }

        }

        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de provincias (Agregar cliente)
        const listarSelectProvincias = (data, select) => {

            data.forEach(element => {
                const Provincias = document.createElement('option');
                Provincias.value = element.IDProvincia;
                Provincias.textContent = element.Provincia;
                fragmento.appendChild(Provincias);
            })

            select.appendChild(fragmento);
            selectProvincias.remove(8); // Remueve la provincia valor 8, es un valor nulo en la base de datos

        }

        // Agrega cliente
        selectProvincias.addEventListener('change', (e) => {

            const valorProvincia = e.target.value;
            fetchDataCantones(valorProvincia, selectCantones, '/Clientes/listarCantones');

            limpiarSelect(selectCantones); // Limpia los select de distritos y cantones, esto si el usuario selecciona otra provincia
            limpiarSelect(selectDistritos);

        })

                // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de cantones
        const fetchDataCantones = async (valorProvincia, select, url) => {


            const cliente = { idProvincia: valorProvincia }

            const root = '@Url.Content("~")';

            const Cabeceras = new Headers({
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            try {


                const response = await fetch(`${root,url}`, {
                    method: 'POST',
                    headers: Cabeceras,
                    body: JSON.stringify(cliente),
                })

                const data = await response.json();
                console.log(data);
                listarSelectCantones(data, select);

            } catch (error) { console.log(error); }

        }

        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de cantones
        const listarSelectCantones = (data, select) => {

            data.forEach(element => {
                const Cantones = document.createElement('option');
                Cantones.value = element.IDCanton;
                Cantones.textContent = element.Canton;
                fragmento.appendChild(Cantones);
            })

            select.appendChild(fragmento);

        }

        // Edita cliente
        selectEditaProvincias.addEventListener('change', (e) => {

            limpiarSelect(selectEditaCantones); // Limpia los select de distritos y cantones, esto si el usuario selecciona otra provincia
            limpiarSelect(selectEditaDistritos);
            const valorProvincia = e.target.value;
            fetchDataCantones(valorProvincia, selectEditaCantones, '/Clientes/listarCantones');

        })


        const fetchDataProvinciasEdita = async (valorProvincia, url, select) => {

            try {

                const root = '@Url.Content("~")';
                const response = await fetch(`${root, url}`);
                const data = await response.json();


                listarSelectProvinciasEdita(data, valorProvincia, select);


            } catch (error) { console.log(error); }

        }

        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de cantones
        const listarSelectProvinciasEdita = (data, valorProvincia, select) => {


            data.forEach(element => {
                const Provincias = document.createElement('option');
                Provincias.value = element.IDProvincia;
                Provincias.textContent = element.Provincia;
                fragmento.appendChild(Provincias);
            })

            select.appendChild(fragmento);
            select.value = valorProvincia;
            selectEditaProvincias.remove(8);

        }

                // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de cantones
        const fetchDataCantonesEdita = async (valorProvincia, valorCanton) => {

            const cliente = { idProvincia: valorProvincia }

            const Cabeceras = new Headers({
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            try {

                const url = "@Url.Content("~/Clientes/listarCantones")";
                const response = await fetch(url, {
                    method: 'POST',
                    headers: Cabeceras,
                    body: JSON.stringify(cliente),
                })

                const data = await response.json();
                listarSelectCantonesEdita(data, valorCanton);

            } catch (error) { console.log(error); }

        }

        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de cantones
        const listarSelectCantonesEdita = (data, valorCanton) => {


            data.forEach(element => {
                const Cantones = document.createElement('option');
                Cantones.value = element.IDCanton;
                Cantones.textContent = element.Canton;
                fragmento.appendChild(Cantones);
            })

            selectEditaCantones.appendChild(fragmento);
            selectEditaCantones.value = valorCanton

        }

        selectCantones.addEventListener('change', (e) => {

            limpiarSelect(selectDistritos); // Limpia los select de distritos , esto si el usuario selecciona otro canton
            const valorCanton = e.target.value;
            fetchDataDistritos(valorCanton, selectDistritos, '/Clientes/listarDistritos');

        })

        selectEditaCantones.addEventListener('change', (e) => {

            limpiarSelect(selectEditaDistritos); // Limpia los select de distritos , esto si el usuario selecciona otro canton
            const valorCanton = e.target.value;
            fetchDataDistritos(valorCanton, selectEditaDistritos, '/Clientes/listarDistritos');

        })

        // Distritos agregar
      const fetchDataDistritos = async (valorCanton, select, url) => {


          const cliente = { idCanton: valorCanton }

          const root = '@Url.Content("~")';

            const Cabeceras = new Headers({
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            try {


                const response = await fetch(`${root, url}`, {
                    method: 'POST',
                    headers: Cabeceras,
                    body: JSON.stringify(cliente),
                })

                const data = await response.json();
                listarSelectDistritos(data, select);

            } catch (error) { console.log(error); }

        }


        // Distritos agregar
        const listarSelectDistritos = (data, select) => {

            data.forEach(element => {
                const Distritos = document.createElement('option');
                Distritos.value = element.IDDistrito;
                Distritos.textContent = element.Distrito;
                fragmento.appendChild(Distritos);
            })

            select.appendChild(fragmento);

        }


        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de editar distritos
          const fetchDataDistritosEdita = async(valorCanton, valorDistrito) => {

          const cliente = { idCanton: valorCanton }

            const Cabeceras = new Headers({
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            try {

                const url = "@Url.Content("~/Clientes/listarDistritos")";
                const response = await fetch(url, {
                    method: 'POST',
                    headers: Cabeceras,
                    body: JSON.stringify(cliente),
                })

                const data = await response.json();
                listarSelectDistritosEdita(data, valorDistrito);

            } catch (error) { console.log(error); }

            }

        // Obtiene los datos de la base de datos y los ingresa al select respectivo, en este caso el de editar distritos
        const listarSelectDistritosEdita = (data, valorDistrito) => {


            data.forEach(element => {
                const Distritos = document.createElement('option');
                Distritos.value = element.IDDistrito;
                Distritos.textContent = element.Distrito;
                fragmento.appendChild(Distritos);
            })

            selectEditaDistritos.appendChild(fragmento);
            selectEditaDistritos.value = valorDistrito;

        }

        const limpiarSelect = (select) => {

            for (let i = select.options.length; i > 0; i--) {

                select.remove(i);
            }
        }


        // Validar ingreso de valor numericos en input indicados, ejemplo: numero telefonico
        const validarDiferentesTiposValoresInput = () => {

            // Este regex solo deja ingresar valores numericos en input indicado
            txtNumeroIdentificacion.addEventListener('input', () => { txtNumeroIdentificacion.value = txtNumeroIdentificacion.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'); });
            txtEditaNumeroIdentificacion.addEventListener('input', () => { txtEditaNumeroIdentificacion.value = txtEditaNumeroIdentificacion.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'); });

            txtEditaNumeroTelefonico.addEventListener('input', () => { txtEditaNumeroTelefonico.value = txtEditaNumeroTelefonico.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'); });
            txtNumeroTelefonico.addEventListener('input', () => { txtNumeroTelefonico.value = txtNumeroTelefonico.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'); });

            txtEditaCodigoTelefonico.addEventListener('input', () => { txtEditaCodigoTelefonico.value = txtEditaCodigoTelefonico.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'); });
            txtCodigoTelefonico.addEventListener('input', () => { txtCodigoTelefonico.value = txtCodigoTelefonico.value.replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'); });


            txtNombre.addEventListener('input', () => { txtNombre.value = txtNombre.value.replace(/[^a-z A-Z]/, '').toUpperCase()})
            txtEditaNombre.addEventListener('input', () => { txtEditaNombre.value = txtEditaNombre.value.replace(/[^a-z A-Z]/, '').toUpperCase() })

        }

        // Se establece el evento submit para el formulario de agregar cliente y prevenimos el envio de datos
        formularioAgregaCliente.addEventListener('submit', (e) => {

            e.preventDefault();
            e.stopPropagation();

            validarCampos();

        })

        // Se establece el evento submit para el formulario de editar cliente y prevenimos el envio de datos
        formularioEditaCliente.addEventListener('submit', (e) => {
            e.preventDefault();
            e.stopPropagation();
            validarCamposEdita();

        })

        // Se establece el evento submit para el formulario de editar cliente y prevenimos el envio de datos
        formularioEliminaCliente.addEventListener('submit', (e) => {
            e.preventDefault();
            e.stopPropagation();
            btnEliminarCliente();

        })

        const validarCampos = () => {

            // Captura los valores ingresados por el usuario
            const numeroIdentificacionValor = txtNumeroIdentificacion.value.trim();
            const nombreValor = txtNombre.value.trim();
            const identificacionValor = selectTipoIdentificacion.value.trim();
            const numeroTelefonicoValor = txtNumeroTelefonico.value.trim();
            const correoElectronicoValor = txtCorreoElectronico.value.trim();
            const direccionValor = txtDireccion.value.trim();
            const provinciaValor = selectProvincias.value.trim();
            const distritoValor = selectDistritos.value.trim();
            const cantonValor = selectCantones.value.trim();
            const codigoTelefonicoValor = txtCodigoTelefonico.value.trim();

            // Banderas que indican que los datos por el usuario fueron ingresados correctamente
            let banderaUno = false;
            let banderaDos = false;
            let banderaTres = false;
            let banderaCuatro = false;
            let banderaCinco = false;
            let banderaSeis = false;
            let banderaSiete = false;
            let banderaOcho = false;
            let banderaNueve = false;
            let banderaDiez = false;



            // Primero valida que el campo no este vacio, luego si el usuario selecciono X identidad requiere un minimo de digitos para su correcta funcionalidad
            if (!numeroIdentificacionValor) {
                validarErroneo(txtNumeroIdentificacion, 'Campo requerido')
                banderaUno = false;
            } else if (identificacionValor == 'Identificación física' && numeroIdentificacionValor.length < 9) {
                validarErroneo(txtNumeroIdentificacion, 'Identificación física requiere 9 dígitos mínimo')
                banderaUno = false;
            } else if (identificacionValor == 'Identificación jurídica' && numeroIdentificacionValor.length < 10) {
                validarErroneo(txtNumeroIdentificacion, 'Identificación jurídica requiere 10 dígitos mínimo')
                banderaUno = false;
            } else {
                validarCorrecto(txtNumeroIdentificacion)
                banderaUno = true;
            }


            if (selectTipoIdentificacion.value == 'Identificación extranjero') {

                banderaCinco = true;
                banderaSeis = true;
                banderaSiete = true;
            } else {
                !provinciaValor ? (validarSelectErroneo(selectProvincias, 'Seleccione una provincia'), banderaCinco = false) : (validarSelectCorrecto(selectProvincias), banderaCinco = true);
                !distritoValor ? (validarSelectErroneo(selectDistritos, 'Seleccione un distrito'), banderaSeis = false) : (validarSelectCorrecto(selectDistritos), banderaSeis = true);
                !cantonValor ? (validarSelectErroneo(selectCantones, 'Seleccione un cantón'), banderaSiete = false) : (validarSelectCorrecto(selectCantones), banderaSiete = true);
            }

            !nombreValor ? (validarErroneo(txtNombre, 'Campo requerido'), banderaDos = false) : (validarCorrecto(txtNombre), banderaDos = true)


            !identificacionValor ? (validarSelectErroneo(selectTipoIdentificacion, 'Seleccione un tipo de identificación'), banderaTres = false) : (validarSelectCorrecto(selectTipoIdentificacion), banderaTres = true);

            !correoElectronicoValor ? (validarErroneo(txtCorreoElectronico, 'Campo requerido'), banderaCuatro = false) : (validarCorrecto(txtCorreoElectronico), banderaCuatro = true)

            !direccionValor ? (validarErroneo(txtDireccion, 'Campo requerido'), banderaOcho = false) : (validarCorrecto(txtDireccion), banderaOcho = true)




            banderaUno && banderaDos && banderaTres && banderaCuatro && banderaCinco && banderaSeis && banderaSiete && banderaOcho ? btnAgregarCliente() : console.log('no')

        }


        const validarCamposEdita = () => {

            // Captura los valores ingresados por el usuario
            const numeroIdentificacionValor = txtEditaNumeroIdentificacion.value.trim();
            const nombreValor = txtEditaNombre.value.trim();
            const identificacionValor = txtTipoIdentificacion.value.trim();
            const numeroTelefonicoValor = txtEditaNumeroTelefonico.value.trim();
            const correoElectronicoValor = txtEditaCorreoElectronico.value.trim();
            const direccionValor = txtEditaDireccion.value.trim();
            const provinciaValor = selectEditaProvincias.value.trim();
            const distritoValor = selectEditaDistritos.value.trim();
            const cantonValor = selectEditaCantones.value.trim();


            // Banderas que indican que los datos por el usuario fueron ingresados correctamente
            let banderaUno = false;
            let banderaDos = false;
            let banderaTres = false;
            let banderaCuatro = false;
            let banderaCinco = false;
            let banderaSeis = false;
            let banderaSiete = false;
            let banderaOcho = false;
            let banderaNueve = false;



            // Primero valida que el campo no este vacio, luego si el usuario selecciono X identidad requiere un minimo de digitos para su correcta funcionalidad
            if (!numeroIdentificacionValor) {
                validarErroneo(txtEditaNumeroIdentificacion, 'Campo requerido')
                banderaUno = false;
            } else if (identificacionValor == 'Identificación física' && numeroIdentificacionValor.length < 9) {
                validarErroneo(txtEditaNumeroIdentificacion, 'Identificación física requiere 9 dígitos mínimo')
                banderaUno = false;
            } else if (identificacionValor == 'Identificación jurídica' && numeroIdentificacionValor.length < 10) {
                validarErroneo(txtEditaNumeroIdentificacion, 'Identificación jurídica requiere 10 dígitos mínimo')
                banderaUno = false;
            } else {
                validarCorrecto(txtEditaNumeroIdentificacion)
                banderaUno = true;
            }


            if (txtTipoIdentificacion.value == 'Identificación extranjero') {
                banderaCinco = true;
                banderaSeis = true;
                banderaSiete = true;
            } else {
                !provinciaValor ? (validarSelectErroneo(selectEditaProvincias, 'Seleccione una provincia'), banderaCinco = false) : (validarSelectCorrecto(selectEditaProvincias), banderaCinco = true);
                !distritoValor ? (validarSelectErroneo(selectEditaDistritos, 'Seleccione un distrito'), banderaSeis = false) : (validarSelectCorrecto(selectEditaDistritos), banderaSeis = true);
                !cantonValor ? (validarSelectErroneo(selectEditaCantones, 'Seleccione un cantón'), banderaSiete = false) : (validarSelectCorrecto(selectEditaCantones), banderaSiete = true);
            }


            !nombreValor ? (validarErroneo(txtEditaNombre, 'Campo requerido'), banderaDos = false) : (validarCorrecto(txtEditaNombre), banderaDos = true)


            !identificacionValor ? (validarErroneo(txtTipoIdentificacion, 'Campo requerido'), banderaTres = false) : (validarCorrecto(txtTipoIdentificacion), banderaTres = true);

            !correoElectronicoValor ? (validarErroneo(txtEditaCorreoElectronico, 'Campo requerido'), banderaCuatro = false) : (validarCorrecto(txtEditaCorreoElectronico), banderaCuatro = true)

            !direccionValor ? (validarErroneo(txtEditaDireccion, 'Campo requerido'), banderaOcho = false) : (validarCorrecto(txtEditaDireccion), banderaOcho = true)



            banderaUno && banderaDos && banderaTres && banderaCuatro && banderaCinco && banderaSeis && banderaSiete && banderaOcho ? btnEditarCliente() : console.log('no')

        }

        // Valida que el usuario haya ingresado datos en el campo de texto indicado
        const validarErroneo = (input, mensaje) => {

            const formControl = input.parentElement;
            const advertencia = formControl.querySelector('small');
            advertencia.innerText = mensaje;
            input.className = 'form-control is-invalid';

        }

        // Valida que el usuario haya ingresado datos en el campo de texto indicado
        const validarSelectErroneo = (select, mensaje) => {
            const formSelect = select.parentElement;
            const advetencia = formSelect.querySelector('small');
            advetencia.innerText = mensaje;
            select.className = 'form-select is-invalid';
        }

        // Valida que el usuario haya ingresado datos en el campo de texto indicado
        const validarCorrecto = (input) => {
            const formControl = input.parentElement;
            const advertencia = formControl.querySelector('small');
            advertencia.innerText = '';
            input.className = 'form-control is-valid';
        }

        // Valida que el usuario haya ingresado datos en el campo de texto indicado
        const validarSelectCorrecto = (select) => {
            const formControl = select.parentElement;
            const advertencia = formControl.querySelector('small');
            advertencia.innerText = '';
            select.className = 'form-select is-valid';
        }

        //Detecta que usuario esta ingresando el numero de identificacion
        txtNumeroIdentificacion.addEventListener('input', () => {

            validarDigitosIdentificacion(txtNumeroIdentificacion, selectTipoIdentificacion, txtNombre);

        })

        //Detecta que usuario selecciono otra opcion, para extraer el nombre acorde a la identificacion
        selectTipoIdentificacion.addEventListener('change', () => {

            validarDigitosIdentificacion(txtNumeroIdentificacion, selectTipoIdentificacion, txtNombre);

            // Deshabilita los select respectivos, provincia, canton y distrito
            if (selectTipoIdentificacion.value == 'Identificación extranjero') {
                selectCantones.disabled = true;
                selectDistritos.disabled = true;
                selectProvincias.disabled = true;
                limpiarSelect(selectCantones);
                limpiarSelect(selectDistritos);
                limpiarSelect(selectProvincias);
            } else {
                limpiarSelect(selectProvincias);
                fetchDataProvincias(selectProvincias);
                selectProvincias.disabled = false;
                selectCantones.disabled = false;
                selectDistritos.disabled = false;
            }

        })

        //Detecta que usuario selecciono otra opcion, para extraer el nombre acorde a la identificacion
        /*selectEditaTipoIdentificacion.addEventListener('change', () => {

            validarDigitosIdentificacion(txtEditaNumeroIdentificacion, selectEditaTipoIdentificacion, txtEditaNombre);

        })*/

        // Valida los diferentes digitos que posee una identificacion en el sistema costarricense
        const validarDigitosIdentificacion = (txtID, select, txtName) => {

            if (txtID.value.length == 9 && select.value == 'Identificación física') {
                fetchDataNombreCliente(txtID.value, txtName); // Numero de identificacion de cliente

            }

            if (txtID.value.length >= 10 && select.value == 'Identificación física') {
                // No se va consumir el API ya que ninguna identificacion fisica posee 10 digitos
                txtName.value = '';

            }

            if (txtID.value.length >= 10 && select.value == 'Identificación jurídica') {
                fetchDataNombreCliente(txtID.value, txtName); // Numero de identificacion de cliente
            }

            if (txtID.value.length == 9 && select.value == 'Identificación jurídica') {
                // No se va consumir el API ya que ninguna identificacion juridica posee 9 digitos
                txtName.value = '';
            }

        }


        // Accion para agregar cliente
        const btnAgregarCliente = () => {

            let datosFormularioAgregaCliente = new FormData(formularioAgregaCliente);
            fetchAgregarCliente(datosFormularioAgregaCliente);

        }

        // Accion para editar cliente
        const btnEditarCliente = () => {

            let datosFormularioEditaCliente = new FormData(formularioEditaCliente);
            fetchEditarCliente(datosFormularioEditaCliente);

        }

        // Accion para eliminar cliente
        const btnEliminarCliente = () => {

            let datosFormularioEliminaCliente = new FormData(formularioEliminaCliente);
            fetchEliminarCliente(datosFormularioEliminaCliente);

        }



        // Funcionalidad para eliminar o editar cliente
        tablaClientes.addEventListener('click', (e) => {

            btnAccion(e);

        })

        // Acciones editar y eliminar
        const btnAccion = (e) => {

            if (e.target.classList.contains('fa-trash-alt')) {

                const numeroIdentificacionCliente = e.target.dataset.idCliente;
                transladarValoresEliminaCliente(numeroIdentificacionCliente);

            }

            if (e.target.classList.contains('fa-pencil-alt')) {

                limpiarSelect(selectEditaCantones);
                limpiarSelect(selectEditaDistritos);
                const numeroIdentificacionCliente = e.target.dataset.idCliente;
                fetchDataCliente(numeroIdentificacionCliente);

                $('#modalEditaCliente').modal('show');

            }

        }

        const fetchDataCliente = async (numeroIdentificacionCliente) => {


            const cliente = { numeroIdentificacion: numeroIdentificacionCliente }

            const Cabeceras = new Headers({
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            try {

                const url = "@Url.Content("~/Clientes/listarCliente")";
                const response = await fetch(url, {
                    method: 'POST',
                    headers: Cabeceras,
                    body: JSON.stringify(cliente),
                })

                const data = await response.json();
                listarCliente(data);




            } catch (error) { console.log(error); }



        }

        const listarCliente = (data) => {

            limpiarSelect(selectEditaProvincias);

            data.forEach(cliente => {

                if (cliente.TipoIdentificacion == 'Identificación extranjero') {
                    selectEditaProvincias.disabled = true;
                    selectEditaDistritos.disabled = true;
                    selectEditaCantones.disabled = true;
                } else {
                    selectEditaProvincias.disabled = false;
                    selectEditaDistritos.disabled = false;
                    selectEditaCantones.disabled = false;
                    fetchDataProvinciasEdita(cliente.IDProvincia, '/Clientes/listarProvincias', selectEditaProvincias);
                    fetchDataCantonesEdita(cliente.IDProvincia, cliente.IDCanton);
                    fetchDataDistritosEdita(cliente.IDCanton, cliente.IDDistrito);
                }
               txtEditaNombre.value = cliente.Nombre;
               txtEditaCorreoElectronico.value = cliente.CorreoElectronico;
               txtEditaNumeroIdentificacion.value = cliente.NumeroIdentificacion;
               txtEditaCorreoElectronicoDos.value = cliente.CorreoElectronicoCopia;
               txtEditaDireccion.value = cliente.Direccion;
               txtEditaNumeroTelefonico.value = cliente.NumeroTelefonico;
                txtTipoIdentificacion.value = cliente.TipoIdentificacion;
                txtEditaCodigoTelefonico.value = cliente.CodigoTelefonico;
           })


        }

        const transladarValoresEliminaCliente = (numeroIdentificacionCliente) => {
            $('#modalEliminaCliente').modal('show');
            const txtEliminaNumeroIdentificacion = document.getElementById('txtEliminaNumeroIdentificacion');
            txtEliminaNumeroIdentificacion.value = numeroIdentificacionCliente;

        }


        const fetchAgregarCliente = async (datosFormularioAgregaCliente) => {
            try {

                const url = "@Url.Content("~/Clientes/agregarClientes")";
                const response = await fetch(url, {
                    method: 'POST',
                    body: datosFormularioAgregaCliente
                })

                const data = await response.json();
                console.log(data)
                if (data == 1) {


                    Swal.fire({
                        position: 'center',
                        icon: 'success',
                        title: '¡Cliente agregado correctamente!',
                        showConfirmButton: false,
                        timer: 1500,

                    })
                    setTimeout(function () {
                        location.reload();
                    }, 1500);

                } else {
                    Swal.fire({
                        position: 'center',
                        icon: 'error',
                        title: '¡Ha ocurrido un error comuníquese con los desarrolladores!',
                        showConfirmButton: false,
                        timer: 1500,

                    })
                }

            } catch (error) { console.log(error); }


        }


        const fetchEditarCliente = async (datosFormularioEditaCliente) => {
            try {

                const url = "@Url.Content("~/Clientes/actualizarClientes")";
                const response = await fetch(url, {
                    method: 'POST',
                    body: datosFormularioEditaCliente
                })

                const data = await response.json();

                if (data == 1) {


                    Swal.fire({
                        position: 'center',
                        icon: 'success',
                        title: '¡Cliente editado correctamente!',
                        showConfirmButton: false,
                        timer: 1500,

                    })
                    setTimeout(function () {
                        location.reload();
                    }, 1500);

                } else {
                    Swal.fire({
                        position: 'center',
                        icon: 'error',
                        title: '¡Ha ocurrido un error comuníquese con los desarrolladores!',
                        showConfirmButton: false,
                        timer: 1500,

                    })
                }

            } catch (error) { console.log(error); }


        }

        const fetchEliminarCliente = async (datosFormularioEliminaCliente) => {
            try {

                const url = "@Url.Content("~/Clientes/eliminarClientes")";
                const response = await fetch(url, {
                    method: 'POST',
                    body: datosFormularioEliminaCliente
                })

                const data = await response.json();

                if (data == 1) {


                    Swal.fire({
                        position: 'center',
                        icon: 'success',
                        title: '¡Cliente eliminado correctamente!',
                        showConfirmButton: false,
                        timer: 1500,

                    })
                    setTimeout(function () {
                        location.reload();
                    }, 1500);

                } else {
                    Swal.fire({
                        position: 'center',
                        icon: 'error',
                        title: '¡Ha ocurrido un error comuníquese con los desarrolladores!',
                        showConfirmButton: false,
                        timer: 1500,

                    })
                }

            } catch (error) { console.log(error); }


        }

    const fetchDataClientes = async() => {
            try {

                const url = "@Url.Content("~/Clientes/listarClientes")";
                const response = await fetch(url);
                const data = await response.json();



                listarClientes(data);

            } catch (error) { console.log(error); }
        }

        const listarClientes = (data) => {

            data.forEach(element => {
                templateTablaClientes.querySelectorAll('td')[0].textContent = element.NumeroIdentificacion;
                templateTablaClientes.querySelectorAll('td')[1].textContent = element.TipoIdentificacion;
                templateTablaClientes.querySelectorAll('td')[2].textContent = element.Nombre;
                templateTablaClientes.querySelectorAll('td')[3].textContent = `+${element.CodigoTelefonico} ${element.NumeroTelefonico}`;
                templateTablaClientes.querySelectorAll('td')[4].textContent = element.CorreoElectronico;
                templateTablaClientes.querySelectorAll('td')[5].textContent = element.CorreoElectronicoCopia;
                templateTablaClientes.querySelectorAll('td')[6].textContent = element.Provincia;
                templateTablaClientes.querySelectorAll('td')[7].textContent = element.Canton;
                templateTablaClientes.querySelectorAll('td')[8].textContent = element.Distrito;
                templateTablaClientes.querySelectorAll('td')[9].textContent = element.Direccion;
                templateTablaClientes.querySelector('.fa-pencil-alt').dataset.idCliente = element.NumeroIdentificacion;
                templateTablaClientes.querySelector('.fa-trash-alt').dataset.idCliente = element.NumeroIdentificacion;
                const clone = templateTablaClientes.cloneNode(true);
                fragmento.appendChild(clone);
            })

            tablaClientes.appendChild(fragmento);
            cargarDatatable();

        }

        // Datatable
        const cargarDatatable = () => {


            $('#tabla-cliente').DataTable(

                {
                    "bDestroy": true,
                    "language": {
                        "url": "//cdn.datatables.net/plug-ins/1.11.3/i18n/es_es.json"
                    }
                },


            );

        }

        // Consume API de hacienda para extraer el nombre del cliente
        const fetchDataNombreCliente = async (numeroIdentificacion, txtName) => {
            try {

                const response = await fetch(`https://api.hacienda.go.cr/fe/ae?identificacion=${numeroIdentificacion}`);
                const data = await response.json();
                txtName.value = data.nombre;

            } catch (error) { console.log(error); }
        }


    </script>
</body>

</html>
